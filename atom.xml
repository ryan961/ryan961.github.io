<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryan</title>
  
  
  <link href="https://ryan961.github.io/atom.xml" rel="self"/>
  
  <link href="https://ryan961.github.io/"/>
  <updated>2022-03-24T00:00:00.000Z</updated>
  <id>https://ryan961.github.io/</id>
  
  <author>
    <name>ryan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tableflip + systemd 实现 Go 应用热重启</title>
    <link href="https://ryan961.github.io/2022/03/24/go-graceful-upgrades/"/>
    <id>https://ryan961.github.io/2022/03/24/go-graceful-upgrades/</id>
    <published>2022-03-24T00:00:00.000Z</published>
    <updated>2022-03-24T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个常驻、高访问量的网络服务来说，在进行代码变更需要对进程进行升级/重启时，如何避免对正在通信的用户以及即将访问的用户造成影响便是一个难以忽视的问题，尤其是在用户量达到一定规模的时候。</p><p>本文将使用 <a href="https://github.com/cloudflare/tableflip">tableflip</a>并结合 <a href="https://github.com/cloudflare/tableflip#integration-with-systemd">systemd</a> 实现 Go 应用优雅的热重启。</p><h2 id="tableflip-简介"><a href="#tableflip-简介" class="headerlink" title="tableflip 简介"></a>tableflip 简介</h2><p><a href="https://github.com/cloudflare/tableflip">tableflip</a> 是 <a href="https://www.cloudflare.com/zh-cn/">cloudflare</a> 实现 Go进程优雅重启的一个开源库，采用 <code>继承监听套接字</code> 方案，整体设计开放性足够，目前看起来是最好的一个实现。</p><p><code>tableflip</code> 的设计宗旨就是实现类似 nginx 的优雅热更新能力，包括：</p><ul><li>新进程启动成功后，老进程不会有资源残留</li><li>优雅的新进程初始化（新进程启动和初始化的过程中服务不会中断）</li><li>容忍新进程初始化的失败（如果新进程初始化失败，老进程会继续工作而不是退出）</li><li>同一时间只能有一个更新动作执行</li></ul><p><code>tableflip</code> 中的核心类型是 <code>Upgrader</code>，调用 <code>Upgrader.Upgrade</code> 会产生一个继承必要的 <code>net.Listeners</code><br>的新进程，并等待新进程发出表明其已成功完成初始化、退出或超时的信号。如果当前已有升级的任务在执行，则直接返回相应的错误。</p><p>当新进程启动成功后，调用 <code>Upgrader.Ready</code> 会清除无效的 fd 并向父进程发出初始化成功完成的信号，然后父进程就可以安心退出。至此，我们就完成了一次优雅的进程重启。</p><p><img src="https://cdn.jsdelivr.net/gh/ryan961/img-floder/blog/go-graceful-upgrades/tableflip_upgrade.png" alt="tableflip upgrade"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>源码地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">upg, err := tableflip.New(tableflip.Options&#123;PIDFile: <span class="string">&quot;./reload.pid&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> upg.Stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了演示方便，为程序启动强行加入 1s 的延时，并在日志中附上进程 pid</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">log.SetPrefix(fmt.Sprintf(<span class="string">&quot;[PID: %d] &quot;</span>, os.Getpid()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听系统的 SIGHUP 信号，以此信号触发进程重启</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">sig := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(sig, syscall.SIGHUP, syscall.SIGUSR2, syscall.SIGTERM, syscall.SIGINT, syscall.SIGQUIT)</span><br><span class="line"><span class="keyword">for</span> si := <span class="keyword">range</span> sig &#123;</span><br><span class="line"><span class="keyword">switch</span> si &#123;</span><br><span class="line"><span class="keyword">case</span> syscall.SIGHUP, syscall.SIGUSR2:</span><br><span class="line"><span class="comment">// 核心的 Upgrade 调用</span></span><br><span class="line"><span class="keyword">if</span> err := upg.Upgrade(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;server upgrade failed:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Println(<span class="string">&quot;shutdown server start:&quot;</span>, si)</span><br><span class="line">upg.Stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意必须使用 upg.Listen 对端口进行监听</span></span><br><span class="line">ln, err := upg.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, endPoint))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Can&#x27;t listen:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个简单的 http server，/version 返回当前的程序版本</span></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/version&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(rw http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.Println(Version)</span><br><span class="line">rw.Write([]<span class="type">byte</span>(Version + <span class="string">&quot;\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Handler: mux,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 照常启动 http server</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := server.Serve(ln)</span><br><span class="line"><span class="keyword">if</span> err != http.ErrServerClosed &#123;</span><br><span class="line">log.Println(<span class="string">&quot;HTTP server:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := upg.Ready(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;http server listening %d&quot;</span>, endPoint)</span><br><span class="line"></span><br><span class="line">&lt;-upg.Exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给老进程的退出设置一个 30s 的超时时间，保证老进程的退出</span></span><br><span class="line">time.AfterFunc(<span class="number">30</span>*time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Graceful shutdown timed out&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待 http server 的优雅退出上面的代码实现了一个返回当前 version 的 http server，我们在启动过程中延迟 1s 以便观察升级过程中服务是否依旧可用。</span></span><br><span class="line">server.Shutdown(context.Background())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build -ldflags &quot;-X main.Version=0.0.1&quot; -o reload</span><br><span class="line">./reload</span><br></pre></td></tr></table></figure><p>使用 curl 模拟一些客户端请求（10 qps）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while true; do curl http://localhost:8080/version; sleep 0.1; done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[PID: 3399216] 2022/03/23 22:21:31 http server listening 8080</span><br><span class="line">[PID: 3399216] 2022/03/23 22:23:48 0.0.1</span><br><span class="line">[PID: 3399216] 2022/03/23 22:23:48 0.0.1</span><br><span class="line">[PID: 3399216] 2022/03/23 22:23:48 0.0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后，我们对应用进行了一些升级，将版本号修改为 0.0.2，并重新编译程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -ldflags &quot;-X main.Version=0.0.2&quot; -o reload</span><br></pre></td></tr></table></figure><p>最后，尝试优雅的热重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -HUP 3399216</span><br></pre></td></tr></table></figure><p>由此可见，客户端没有受到服务器端 reload 的影响。至此，进程优雅的热更新已完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[PID: 3399216] 2022/03/23 22:23:48 0.0.1</span><br><span class="line">[PID: 3399216] 2022/03/23 22:23:48 0.0.1</span><br><span class="line">[PID: 3401398] 2022/03/23 22:23:48 http server listening 8080</span><br><span class="line"><span class="meta prompt_">~/reload# </span><span class="language-bash">[PID: 3401398] 2022/03/23 22:23:48 0.0.2</span></span><br><span class="line">[PID: 3401398] 2022/03/23 22:23:48 0.0.2</span><br><span class="line">[PID: 3401398] 2022/03/23 22:23:48 0.0.2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="systemd-管理进程"><a href="#systemd-管理进程" class="headerlink" title="systemd 管理进程"></a>systemd 管理进程</h2><p>reload_go.service:</p><figure class="highlight plaintext"><figcaption><span>file (systemd)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Service using tableflip</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/root/reload</span><br><span class="line">ExecStart=/root/reload/reload</span><br><span class="line">ExecStop=/bin/kill -TERM $MAINPID</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">PIDFile=/root/reload/reload.pid</span><br><span class="line">Type=simple</span><br></pre></td></tr></table></figure><p>使用 <code>systemd</code> 管理进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@:# systemctl start reload_go.service</span><br><span class="line">root@:# systemctl status reload_go.service</span><br><span class="line">● reload_go.service - Service using tableflip</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/reload_go.service; static; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-03-24 21:04:07 CST; 6s ago</span><br><span class="line">   Main PID: 3929535 (reload)</span><br><span class="line">      Tasks: 7 (limit: 4619)</span><br><span class="line">     Memory: 1.4M</span><br><span class="line">     CGroup: /system.slice/reload_go.service</span><br><span class="line">             └─3929535 /root/reload/reload</span><br><span class="line"></span><br><span class="line">Mar 24 21:04:07 systemd[1]: Started Service using tableflip.</span><br><span class="line">Mar 24 21:04:08 reload[3929535]: [PID: 3929535] 2022-03-24 21:04:08 http server listening 8080          </span><br><span class="line">root@:# systemctl reload reload_go.service</span><br><span class="line">root@:# systemctl status reload_go.service</span><br><span class="line">● reload_go.service - Service using tableflip</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/reload_go.service; static; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-03-24 21:04:07 CST; 17s ago</span><br><span class="line">    Process: 3929585 ExecReload=/bin/kill -HUP $MAINPID (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 3929588 (reload)</span><br><span class="line">      Tasks: 10 (limit: 4619)</span><br><span class="line">     Memory: 1.8M</span><br><span class="line">     CGroup: /system.slice/reload_go.service</span><br><span class="line">             └─3929588 /root/reload/reload</span><br><span class="line"></span><br><span class="line">Mar 24 21:04:07 systemd[1]: Started Service using tableflip.</span><br><span class="line">Mar 24 21:04:08 reload[3929535]: [PID: 3929535] 2022/03/24 21:04:08 http server listening 8080       </span><br><span class="line">Mar 24 21:04:23 systemd[1]: Reloading Service using tableflip.</span><br><span class="line">Mar 24 21:04:23 systemd[1]: Reloaded Service using tableflip.</span><br><span class="line">Mar 24 21:04:24 reload[3929588]: [PID: 3929588] 2022/03/24 21:04:24 http server listening 8080      </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>至此，我们已基本完成使用 <code>systemd</code> 管理进程。</p><h2 id="判断-reload-是否成功"><a href="#判断-reload-是否成功" class="headerlink" title="判断 reload 是否成功"></a>判断 reload 是否成功</h2><p>根据前面的流程，我们已基本完成 reload + systemd 的需求。但实际在发布过程中，<code>reload</code> 成功与否 <code>systemd</code> 无法感知，必须人工介入查看进程状态才能获知。而判断 <code>reload</code> 成功与否的标志便是进程 <code>pid</code> 是否发生变化，所以我们加入 <code>reload.sh</code> 来判断 <code>pid</code> 是否变化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">OLD_PID=$(cat $1)</span><br><span class="line">/bin/kill -HUP $OLD_PID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待进程 reload 成功</span></span><br><span class="line">sleep 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否启动成功</span></span><br><span class="line">NEW_PID=$(cat $1)</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">旧进程退出, 新进程启动</span></span><br><span class="line">ps --pid $OLD_PID &amp;&gt;/dev/null</span><br><span class="line">OLD_EXIST=$?</span><br><span class="line">ps --pid $NEW_PID &amp;&gt;/dev/null</span><br><span class="line">NEW_EXIST=$?</span><br><span class="line"> </span><br><span class="line">if [ $OLD_EXIST -eq 1 ] &amp;&amp; [ $NEW_EXIST -eq 0 ]; then</span><br><span class="line">  exit 0</span><br><span class="line">else</span><br><span class="line">  exit -1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>更新 <code>reload_go.service</code> :</p><figure class="highlight plaintext"><figcaption><span>file (systemd)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Service using tableflip</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/root/reload</span><br><span class="line">ExecStart=/root/reload/reload</span><br><span class="line">ExecStop=/bin/kill -TERM $MAINPID</span><br><span class="line">ExecReload=/root/reload/reload.sh /root/reload/reload.pid</span><br><span class="line">PIDFile=/root/reload/reload.pid</span><br><span class="line">Type=simple</span><br></pre></td></tr></table></figure><p>模拟进程 <code>reload</code> 失败：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">root@:# systemctl start reload_go.service</span><br><span class="line">root@:# systemctl status reload_go.service</span><br><span class="line">● reload_go.service - Service using tableflip</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/reload_go.service; static; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-03-24 21:43:15 CST; 2s ago</span><br><span class="line">   Main PID: 3935728 (reload)</span><br><span class="line">      Tasks: 7 (limit: 4619)</span><br><span class="line">     Memory: 1.3M</span><br><span class="line">     CGroup: /system.slice/reload_go.service</span><br><span class="line">             └─3935728 /root/reload/reload</span><br><span class="line"></span><br><span class="line">Mar 24 21:43:15 systemd[1]: Started Service using tableflip.</span><br><span class="line">Mar 24 21:43:16 reload[3935728]: [PID: 3935728] 2022/03/24 21:43:16 http server listening 8080</span><br><span class="line">root@:# systemctl reload reload_go.service</span><br><span class="line">root@:# systemctl status reload_go.service</span><br><span class="line">● reload_go.service - Service using tableflip</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/reload_go.service; static; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-03-24 21:43:15 CST; 28s ago</span><br><span class="line">    Process: 3935781 ExecReload=/root/reload/reload.sh /root/reload/reload.pid (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 3935789 (reload)</span><br><span class="line">      Tasks: 7 (limit: 4619)</span><br><span class="line">     Memory: 2.0M</span><br><span class="line">     CGroup: /system.slice/reload_go.service</span><br><span class="line">             └─3935789 /root/reload/reload</span><br><span class="line"></span><br><span class="line">Mar 24 21:43:15 systemd[1]: Started Service using tableflip.</span><br><span class="line">Mar 24 21:43:16 reload[3935728]: [PID: 3935728] 2022/03/24 21:43:16 http server listening 8080</span><br><span class="line">Mar 24 21:43:30 systemd[1]: Reloading Service using tableflip.</span><br><span class="line">Mar 24 21:43:31 reload[3935789]: [PID: 3935789] 2022/03/24 21:43:31 http server listening 8080</span><br><span class="line">Mar 24 21:43:40 systemd[1]: Reloaded Service using tableflip.</span><br><span class="line">root@:/etc/systemd/system# systemctl reload reload_go.service</span><br><span class="line">Job for reload_go.service failed.</span><br><span class="line">See &quot;systemctl status reload_go.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">root@:# systemctl status reload_go.service</span><br><span class="line">● reload_go.service - Service using tableflip</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/reload_go.service; static; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-03-24 21:43:15 CST; 1min 43s ago</span><br><span class="line">    Process: 3936335 ExecReload=/root/reload/reload.sh /root/reload/reload.pid (code=exited, status=255/EXCEPTION)</span><br><span class="line">   Main PID: 3935789 (reload)</span><br><span class="line">      Tasks: 7 (limit: 4619)</span><br><span class="line">     Memory: 2.2M</span><br><span class="line">     CGroup: /system.slice/reload_go.service</span><br><span class="line">             └─3935789 /root/reload/reload</span><br><span class="line"></span><br><span class="line">Mar 24 21:43:31 reload[3935789]: [PID: 3935789] 2022/03/24 21:43:31 http server listening 8080</span><br><span class="line">Mar 24 21:43:40 systemd[1]: Reloaded Service using tableflip.</span><br><span class="line">Mar 24 21:44:39 systemd[1]: Reloading Service using tableflip.</span><br><span class="line">Mar 24 21:44:39 reload[3936338]: panic: reload.sh</span><br><span class="line">Mar 24 21:44:39 reload[3936338]: goroutine 1 [running]:</span><br><span class="line">Mar 24 21:44:39 reload[3936338]: main.main()</span><br><span class="line">Mar 24 21:44:39 reload[3936338]:         /root/reload/main.go:23 +0x3e</span><br><span class="line">Mar 24 21:44:39 reload[3935789]: [PID: 3935789] 2022/03/24 21:44:39 server upgrade failed: child pid=3936338 exited: ex&gt;</span><br><span class="line">Mar 24 21:44:49 systemd[1]: reload_go.service: Control process exited, code=exited, status=255/EXCEPTION</span><br><span class="line">Mar 24 21:44:49 systemd[1]: Reload failed for Service using tableflip.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上述流程，我们已完成使用 <code>systemd</code> + <code>tableflip</code> 优雅重启进程的需求，并基本可以投入生产环境中使用。有需要也可以自行接入 <code>spug</code> 发布流程中。</p><p>源码地址：<a href="https://github.com/ryan961/go-exp/tree/main/reload">https://github.com/ryan961/go-exp/tree/main/reload</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/cloudflare/tableflip">https://github.com/cloudflare/tableflip</a></li><li><a href="https://blog.cloudflare.com/graceful-upgrades-in-go/">https://blog.cloudflare.com/graceful-upgrades-in-go/</a></li><li><a href="https://gocn.vip/topics/qoYMdnTxo4">https://gocn.vip/topics/qoYMdnTxo4</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于一个常驻、高访问量的网络服务来说，在进行代码变更需要对进程进行升级/重启时，如何避免对正在通信的用户以及即将访问的用户造成影响便是一个难以忽视的问题，尤其是在用户量达到一定规模的时候。&lt;/p&gt;
&lt;p&gt;本文将使用 &lt;a href=&quot;https://github.com/c</summary>
      
    
    
    
    <category term="golang" scheme="https://ryan961.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://ryan961.github.io/tags/golang/"/>
    
    <category term="reload" scheme="https://ryan961.github.io/tags/reload/"/>
    
    <category term="systemd" scheme="https://ryan961.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>我的 macOS 软件清单</title>
    <link href="https://ryan961.github.io/2022/03/20/my-mac-tools/"/>
    <id>https://ryan961.github.io/2022/03/20/my-mac-tools/</id>
    <published>2022-03-20T00:00:00.000Z</published>
    <updated>2022-03-20T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生中的第一篇博客，无脑水一篇「我的 macOS 软件清单」～</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="ide-编辑器"><a href="#ide-编辑器" class="headerlink" title="ide/编辑器"></a>ide/编辑器</h3><ul><li><a href="https://www.jetbrains.com/">JetBrains 全家桶</a> 搬砖主力工具，需要付费，也可以通过申请教育许可证、开发者认证等渠道激活，建议科学使用～</li><li><a href="https://code.visualstudio.com/download">Visual Studio Code</a> 全能代码编辑器，其实不怎么使用。</li><li><a href="https://www.sublimetext.com/">Sublime Text</a> 代码 “记事本”，平时用做简单的代码或者数据编辑。</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="https://www.navicat.com.cn/">Navicat</a> MySQL、MongoDB 都能使用。</li><li><a href="https://github.com/uglide/RedisDesktopManager">RedisDesktopManager</a> Redis 可视化工具。</li><li><a href="http://www.sequelpro.com/">Sequel Pro</a> MySQL 图形客户端。</li></ul><h3 id="虚拟机-容器"><a href="#虚拟机-容器" class="headerlink" title="虚拟机/容器"></a>虚拟机/容器</h3><ul><li><a href="https://www.parallels.com/">Parallel desktop</a> 虚拟机，比 Vmware 好用很多。</li><li><a href="https://hub.docker.com/">Docker</a> Docker，也是虚拟机。</li></ul><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><ul><li><a href="https://iterm2.com/">iTerm2</a> 终端软件，比 Mac 自带的好用多了。</li><li><a href="https://ohmyz.sh/">Oh My Zsh</a> 一键配置 Zsh 环境的脚本。</li><li><a href="https://brew.sh/">Homebrew</a> Mac 装各种工具用的。</li><li><a href="https://asdf-vm.com/">asdf</a> 巨好用的多版本管理工具。</li><li><a href="https://github.com/skywind3000/z.lua/">z.lua</a> 命令行快速跳转工具。</li></ul><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul><li><a href="https://www.sourcetreeapp.com/">SourceTree</a> 图形界面管理 Git 仓库。</li><li><a href="https://www.postman.com/">Postman</a> 调试 API 用的 HTTP 客户端。</li><li><a href="https://www.charlesproxy.com/">Charles</a> 抓包工具。</li><li><a href="https://github.com/bloomrpc/bloomrpc">BloomRPC</a> 调试 Grpc 接口工具。</li><li><a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 切换 Host 的工具。</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><ul><li><a href="https://ohmystarapp.com/">OhMyStar</a> 管理和查找自己在 Github 上点的 Star。</li><li><a href="https://kapeli.com/dash">Dash</a> 开源项目文档查看工具。</li><li><a href="https://www.alfredapp.com/">Alfred</a> Mac 效率神器。</li><li><a href="https://github.com/yichengchen/clashX">ClashX</a> 那个啥科学上网，dddd（懂得都懂）。</li></ul><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><ul><li><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a> 科学上网你懂的。</li><li><a href="https://www.octotree.io/">Octotree</a> 常逛 Github 的你，必备。可以将仓库代码梳理成一个树状文件列表，挂到页面左侧。</li><li><a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E7%BB%88%E7%BB%93%E8%80%85/fpdnjdlbdmifoocedhkighhlbchbiikl">广告终结者</a> 这个不用说了吧，清爽.</li><li><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad">划词翻译</a> 学渣必备。</li><li><a href="https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe">uBlacklist</a> 搜索结果中屏蔽特定的网站显示，清爽。</li></ul><h3 id="好用推荐"><a href="#好用推荐" class="headerlink" title="好用推荐"></a>好用推荐</h3><ul><li><a href="https://github.com/exelban/stats">stats</a> 查看系 (风) 统 (扇) 状 (转) 态 (速) 等各种系统指标的工具。</li><li><a href="https://github.com/Mortennn/Dozer">Dozer</a> Mac menu bar 隐藏工具。</li><li><a href="https://github.com/lanceliao/china-holiday-calender">china-holiday-calender</a> 日历订阅，中国节假日、调休、补班日历信息。</li><li><a href="https://theunarchiver.com/">The Unarchiver</a> 解压缩工具。</li><li><a href="https://paper.meiyuan.in/">pap.er</a> 好用的 Mac 壁纸软件。</li><li><a href="https://apps.apple.com/cn/app/id1485844094">ishot</a> 截长图工具。</li><li><a href="https://github.com/marktext/marktext">Mark Text</a> Markdown 文件编辑工具。</li></ul><p>今天的分享先到这里，后续有好用的再补充～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;人生中的第一篇博客，无脑水一篇「我的 macOS 软件清单」～&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;h3 id=&quot;ide-编辑器&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="mac tools" scheme="https://ryan961.github.io/categories/mac-tools/"/>
    
    
    <category term="mac" scheme="https://ryan961.github.io/tags/mac/"/>
    
    <category term="tools" scheme="https://ryan961.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
